{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      workouts: [],\n      exercises: [],\n      selectedWorkout: null,\n      hideExercises: {}\n    };\n  },\n  created() {\n    this.loadWorkouts();\n  },\n  methods: {\n    loadWorkouts() {\n      axios.get('/api/workouts').then(response => {\n        this.workouts = response.data;\n      }).catch(error => {\n        console.error(\"Error loading workouts:\", error);\n      });\n    },\n    fetchExercises() {\n      const workout = this.workouts.find(w => w.Name === this.selectedWorkout);\n      this.exercises = workout ? workout.Exercises : [];\n      this.disabledExercises = {}; // Reset disabled exercises when a new workout is selected\n    },\n    handleInput(exerciseName) {\n      if (exerciseName === \"Benkpress med stong\") {\n        this.disabledExercises[\"Benkpress med manuala\"] = true;\n      } else if (exerciseName === \"Benkpress med manuala\") {\n        this.disabledExercises[\"Benkpress med stong\"] = true;\n      }\n      // Optionally clear the disabled condition if the inputs are cleared\n      const exercise = this.exercises.find(ex => ex.Name === exerciseName);\n      if (!exercise.Reps.some(rep => rep > 0) && !exercise.Weights.some(weight => weight > 0)) {\n        this.disabledExercises[\"Benkpress med stong\"] = false;\n        this.disabledExercises[\"Benkpress med manuala\"] = false;\n      }\n    },\n    saveWorkout() {\n      axios.post('/api/log', {\n        exercises: this.exercises\n      }).then(() => {\n        alert('Workout saved!');\n      }).catch(error => {\n        console.error(\"Error saving workout:\", error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","workouts","exercises","selectedWorkout","hideExercises","created","loadWorkouts","methods","get","then","response","catch","error","console","fetchExercises","workout","find","w","Name","Exercises","disabledExercises","handleInput","exerciseName","exercise","ex","Reps","some","rep","Weights","weight","saveWorkout","post","alert"],"sources":["/Users/drd/Repos/Public/helsi/frontend/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h1>Log workout</h1>\n    <select v-model=\"selectedWorkout\" @change=\"fetchExercises\">\n      <option v-for=\"workout in workouts\" :key=\"workout.Name\" :value=\"workout.Name\">\n        {{ workout.Name }}\n      </option>\n    </select>\n\n    <div v-for=\"exercise in exercises\" :key=\"exercise.Name\" v-if=\"!hideExercises[exercise.Name]\">\n      <h2>{{ exercise.Name }}</h2>\n      <div class=\"set-details\" v-for=\"setIndex in exercise.Sets\" :key=\"setIndex\">\n        Set {{ setIndex }}:\n        <input type=\"number\" v-model=\"exercise.Reps[setIndex-1]\" @change=\"handleInput(exercise.Name)\" placeholder=\"Reps\"/>\n        <input type=\"number\" v-model=\"exercise.Weights[setIndex-1]\" @change=\"handleInput(exercise.Name)\" placeholder=\"Weight (kg)\"/>\n      </div>\n    </div>\n\n    <button @click=\"saveWorkout\">Save Workout</button>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data() {\n    return {\n      workouts: [],\n      exercises: [],\n      selectedWorkout: null,\n      hideExercises: {}\n    };\n  },\n  created() {\n    this.loadWorkouts();\n  },\n  methods: {\n    loadWorkouts() {\n    axios.get('/api/workouts').then(response => {\n      this.workouts = response.data;\n    }).catch(error => {\n      console.error(\"Error loading workouts:\", error);\n    });\n  },\n  fetchExercises() {\n    const workout = this.workouts.find(w => w.Name === this.selectedWorkout);\n    this.exercises = workout ? workout.Exercises : [];\n    this.disabledExercises = {};  // Reset disabled exercises when a new workout is selected\n  },\n  handleInput(exerciseName) {\n    if (exerciseName === \"Benkpress med stong\") {\n      this.disabledExercises[\"Benkpress med manuala\"] = true;\n    } else if (exerciseName === \"Benkpress med manuala\") {\n      this.disabledExercises[\"Benkpress med stong\"] = true;\n    }\n    // Optionally clear the disabled condition if the inputs are cleared\n    const exercise = this.exercises.find(ex => ex.Name === exerciseName);\n    if (!exercise.Reps.some(rep => rep > 0) && !exercise.Weights.some(weight => weight > 0)) {\n      this.disabledExercises[\"Benkpress med stong\"] = false;\n      this.disabledExercises[\"Benkpress med manuala\"] = false;\n    }\n  },\n  saveWorkout() {\n    axios.post('/api/log', { exercises: this.exercises }).then(() => {\n      alert('Workout saved!');\n    }).catch(error => {\n      console.error(\"Error saving workout:\", error);\n    });\n  }\n}\n\n};\n</script>\n\n<style lang=\"scss\">\n$background-color: #000;\n$text-color: #fff;\n$button-color: #673ab7;\n$input-background: #9c27b0;\n$input-text-color: #fff;\n\n.container {\n  background-color: $background-color;\n  color: $text-color;\n  padding: 20px;\n  border-radius: 8px;\n  width: 90%;\n  max-width: 600px;\n  margin: 20px auto;\n  box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n}\n\nselect, input[type=\"number\"] {\n  width: 100%;\n  padding: 8px;\n  margin: 10px 0;\n  background-color: $input-background;\n  color: $input-text-color;\n  border: 1px solid darken($input-background, 15%);\n  border-radius: 4px;\n  outline: none;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n\n  &::placeholder {\n    color: lighten($input-text-color, 20%);\n  }\n}\n\nbutton {\n  width: 100%;\n  padding: 10px;\n  background-color: $button-color;\n  color: $text-color;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    background-color: lighten($button-color, 10%);\n  }\n}\n\n.exercises {\n  margin-top: 20px;\n}\n\n.exercise-sets {\n  display: flex;\n  justify-content: space-between;\n  input {\n    flex: 1;\n    &:not(:last-child) {\n      margin-right: 10px;\n    }\n  }\n}\n</style>\n"],"mappings":"AAuBA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE,EAAE;MACbC,eAAe,EAAE,IAAI;MACrBC,aAAa,EAAE,CAAC;IAClB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,YAAY,CAAC,CAAC;EACrB,CAAC;EACDC,OAAO,EAAE;IACPD,YAAYA,CAAA,EAAG;MACfP,KAAK,CAACS,GAAG,CAAC,eAAe,CAAC,CAACC,IAAI,CAACC,QAAO,IAAK;QAC1C,IAAI,CAACT,QAAO,GAAIS,QAAQ,CAACV,IAAI;MAC/B,CAAC,CAAC,CAACW,KAAK,CAACC,KAAI,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CAAC,CAAC;IACJ,CAAC;IACDE,cAAcA,CAAA,EAAG;MACf,MAAMC,OAAM,GAAI,IAAI,CAACd,QAAQ,CAACe,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACC,IAAG,KAAM,IAAI,CAACf,eAAe,CAAC;MACxE,IAAI,CAACD,SAAQ,GAAIa,OAAM,GAAIA,OAAO,CAACI,SAAQ,GAAI,EAAE;MACjD,IAAI,CAACC,iBAAgB,GAAI,CAAC,CAAC,EAAG;IAChC,CAAC;IACDC,WAAWA,CAACC,YAAY,EAAE;MACxB,IAAIA,YAAW,KAAM,qBAAqB,EAAE;QAC1C,IAAI,CAACF,iBAAiB,CAAC,uBAAuB,IAAI,IAAI;MACxD,OAAO,IAAIE,YAAW,KAAM,uBAAuB,EAAE;QACnD,IAAI,CAACF,iBAAiB,CAAC,qBAAqB,IAAI,IAAI;MACtD;MACA;MACA,MAAMG,QAAO,GAAI,IAAI,CAACrB,SAAS,CAACc,IAAI,CAACQ,EAAC,IAAKA,EAAE,CAACN,IAAG,KAAMI,YAAY,CAAC;MACpE,IAAI,CAACC,QAAQ,CAACE,IAAI,CAACC,IAAI,CAACC,GAAE,IAAKA,GAAE,GAAI,CAAC,KAAK,CAACJ,QAAQ,CAACK,OAAO,CAACF,IAAI,CAACG,MAAK,IAAKA,MAAK,GAAI,CAAC,CAAC,EAAE;QACvF,IAAI,CAACT,iBAAiB,CAAC,qBAAqB,IAAI,KAAK;QACrD,IAAI,CAACA,iBAAiB,CAAC,uBAAuB,IAAI,KAAK;MACzD;IACF,CAAC;IACDU,WAAWA,CAAA,EAAG;MACZ/B,KAAK,CAACgC,IAAI,CAAC,UAAU,EAAE;QAAE7B,SAAS,EAAE,IAAI,CAACA;MAAU,CAAC,CAAC,CAACO,IAAI,CAAC,MAAM;QAC/DuB,KAAK,CAAC,gBAAgB,CAAC;MACzB,CAAC,CAAC,CAACrB,KAAK,CAACC,KAAI,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C,CAAC,CAAC;IACJ;EACF;AAEA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}